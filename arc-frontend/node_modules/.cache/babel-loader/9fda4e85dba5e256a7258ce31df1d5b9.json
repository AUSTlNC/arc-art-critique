{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useInfiniteScroll = callback => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", isScrolling);\n    return () => window.removeEventListener(\"scroll\", isScrolling);\n  }, []);\n  useEffect(() => {\n    if (!isFetching) return;\n    callback();\n  }, [isFetching]);\n\n  function isScrolling() {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isFetching) return;\n    setIsFetching(true);\n  }\n\n  return [isFetching, setIsFetching];\n};\n\n_s(useInfiniteScroll, \"NA5CwANT1gxbcTuimobX/8A7Nig=\");\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["/Users/AustinCai/Desktop/CS 370/ARC/Arc-FrontEnd-2.0/src/components/useInfiniteScroll.js"],"names":["useState","useEffect","useInfiniteScroll","callback","isFetching","setIsFetching","window","addEventListener","isScrolling","removeEventListener","innerHeight","document","documentElement","scrollTop","offsetHeight"],"mappings":";;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAGC,QAAQ,IAAI;AAAA;;AACpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,WAAlC;AACA,WAAO,MAAMF,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCD,WAArC,CAAb;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACG,UAAL,EAAiB;AACjBD,IAAAA,QAAQ;AACT,GAHQ,EAGN,CAACC,UAAD,CAHM,CAAT;;AAKA,WAASI,WAAT,GAAuB;AACrB,QACEF,MAAM,CAACI,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KACEF,QAAQ,CAACC,eAAT,CAAyBE,YAD3B,IAEAV,UAHF,EAKE;AACFC,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD;;AACD,SAAO,CAACD,UAAD,EAAaC,aAAb,CAAP;AACD,CAvBD;;GAAMH,iB;;AAyBN,eAAeA,iBAAf","sourcesContent":["\nimport { useState, useEffect } from \"react\";\n\nconst useInfiniteScroll = callback => {\n  const [isFetching, setIsFetching] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", isScrolling);\n    return () => window.removeEventListener(\"scroll\", isScrolling);\n  }, []);\n\n  useEffect(() => {\n    if (!isFetching) return;\n    callback();\n  }, [isFetching]);\n\n  function isScrolling() {\n    if (\n      window.innerHeight + document.documentElement.scrollTop !==\n        document.documentElement.offsetHeight ||\n      isFetching\n    )\n      return;\n    setIsFetching(true);\n  }\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;"]},"metadata":{},"sourceType":"module"}