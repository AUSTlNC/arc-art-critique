{"ast":null,"code":"/*!\n * FilePondPluginFileEncode 2.1.10\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.FilePondPluginFileEncode = factory());\n})(this, function () {\n  'use strict';\n\n  var DataURIWorker = function DataURIWorker() {\n    // route messages\n    self.onmessage = function (e) {\n      convert(e.data.message, function (response) {\n        self.postMessage({\n          id: e.data.id,\n          message: response\n        });\n      });\n    }; // convert file to data uri\n\n\n    var convert = function convert(options, cb) {\n      var file = options.file;\n      var reader = new FileReader();\n\n      reader.onloadend = function () {\n        cb(reader.result.replace('data:', '').replace(/^.+,/, ''));\n      };\n\n      reader.readAsDataURL(file);\n    };\n  };\n\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n        utils = _ref.utils; // get quick reference to Type utils\n\n    var Type = utils.Type,\n        createWorker = utils.createWorker,\n        createRoute = utils.createRoute,\n        isFile = utils.isFile;\n\n    var encode = function encode(_ref2) {\n      var name = _ref2.name,\n          file = _ref2.file;\n      return new Promise(function (resolve) {\n        var worker = createWorker(DataURIWorker);\n        worker.post({\n          file: file\n        }, function (data) {\n          resolve({\n            name: name,\n            data: data\n          });\n          worker.terminate();\n        });\n      });\n    }; // holds base64 strings till can be moved to item\n\n\n    var base64Cache = [];\n    addFilter('DID_CREATE_ITEM', function (item, _ref3) {\n      var query = _ref3.query;\n      if (!query('GET_ALLOW_FILE_ENCODE')) return;\n      item.extend('getFileEncodeBase64String', function () {\n        return base64Cache[item.id] && base64Cache[item.id].data;\n      });\n      item.extend('getFileEncodeDataURL', function () {\n        return 'data:'.concat(item.fileType, ';base64,').concat(base64Cache[item.id].data);\n      });\n    });\n    addFilter('SHOULD_PREPARE_OUTPUT', function (shouldPrepareOutput, _ref4) {\n      var query = _ref4.query;\n      return new Promise(function (resolve) {\n        resolve(query('GET_ALLOW_FILE_ENCODE'));\n      });\n    });\n    addFilter('COMPLETE_PREPARE_OUTPUT', function (file, _ref5) {\n      var item = _ref5.item,\n          query = _ref5.query;\n      return new Promise(function (resolve) {\n        // if it's not a file or a list of files, continue\n        if (!query('GET_ALLOW_FILE_ENCODE') || !isFile(file) && !Array.isArray(file)) {\n          return resolve(file);\n        } // store metadata settings for this cache\n\n\n        base64Cache[item.id] = {\n          metadata: item.getMetadata(),\n          data: null\n        }; // wait for all file items to be encoded\n\n        Promise.all((file instanceof Blob ? [{\n          name: null,\n          file: file\n        }] : file).map(encode)).then(function (dataItems) {\n          base64Cache[item.id].data = file instanceof Blob ? dataItems[0].data : dataItems;\n          resolve(file);\n        });\n      });\n    }); // called for each view that is created right after the 'create' method\n\n    addFilter('CREATE_VIEW', function (viewAPI) {\n      // get reference to created view\n      var is = viewAPI.is,\n          view = viewAPI.view,\n          query = viewAPI.query; // only hook up to item view\n\n      if (!is('file-wrapper') || !query('GET_ALLOW_FILE_ENCODE')) {\n        return;\n      }\n\n      view.registerWriter(createRoute({\n        DID_PREPARE_OUTPUT: function DID_PREPARE_OUTPUT(_ref6) {\n          var root = _ref6.root,\n              action = _ref6.action; // only do this if is not uploading async\n\n          if (query('IS_ASYNC')) {\n            return;\n          }\n\n          var item = query('GET_ITEM', action.id);\n          if (!item) return; // extract base64 string\n\n          var cache = base64Cache[item.id];\n          var metadata = cache.metadata;\n          var data = cache.data; // create JSON string from encoded data\n\n          var value = JSON.stringify({\n            id: item.id,\n            name: item.file.name,\n            type: item.file.type,\n            size: item.file.size,\n            metadata: metadata,\n            data: data\n          }); // for filepond < 4.13.0\n\n          if (root.ref.data) {\n            root.ref.data.value = value;\n          } // newer versions\n          else {\n              root.dispatch('DID_DEFINE_VALUE', {\n                id: item.id,\n                value: value\n              });\n            }\n        },\n        DID_REMOVE_ITEM: function DID_REMOVE_ITEM(_ref7) {\n          var action = _ref7.action;\n          var item = query('GET_ITEM', action.id);\n          if (!item) return;\n          delete base64Cache[item.id];\n        }\n      }));\n    });\n    return {\n      options: {\n        // Enable or disable file encoding\n        allowFileEncode: [true, Type.BOOLEAN]\n      }\n    };\n  }; // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n\n\n  var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\n  if (isBrowser) {\n    document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', {\n      detail: plugin\n    }));\n  }\n\n  return plugin;\n});","map":{"version":3,"sources":["/Users/AustinCai/Desktop/CS 370/ARC/Arc-FrontEnd-2.0/node_modules/filepond-plugin-file-encode/dist/filepond-plugin-file-encode.js"],"names":["global","factory","exports","module","define","amd","self","FilePondPluginFileEncode","DataURIWorker","onmessage","e","convert","data","message","response","postMessage","id","options","cb","file","reader","FileReader","onloadend","result","replace","readAsDataURL","plugin","_ref","addFilter","utils","Type","createWorker","createRoute","isFile","encode","_ref2","name","Promise","resolve","worker","post","terminate","base64Cache","item","_ref3","query","extend","concat","fileType","shouldPrepareOutput","_ref4","_ref5","Array","isArray","metadata","getMetadata","all","Blob","map","then","dataItems","viewAPI","is","view","registerWriter","DID_PREPARE_OUTPUT","_ref6","root","action","cache","value","JSON","stringify","type","size","ref","dispatch","DID_REMOVE_ITEM","_ref7","allowFileEncode","BOOLEAN","isBrowser","window","document","dispatchEvent","CustomEvent","detail"],"mappings":"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","sourcesContent":["/*!\n * FilePondPluginFileEncode 2.1.10\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\n(function(global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined'\n    ? (module.exports = factory())\n    : typeof define === 'function' && define.amd\n    ? define(factory)\n    : ((global = global || self),\n      (global.FilePondPluginFileEncode = factory()));\n})(this, function() {\n  'use strict';\n\n  var DataURIWorker = function DataURIWorker() {\n    // route messages\n    self.onmessage = function(e) {\n      convert(e.data.message, function(response) {\n        self.postMessage({ id: e.data.id, message: response });\n      });\n    };\n\n    // convert file to data uri\n    var convert = function convert(options, cb) {\n      var file = options.file;\n\n      var reader = new FileReader();\n      reader.onloadend = function() {\n        cb(reader.result.replace('data:', '').replace(/^.+,/, ''));\n      };\n      reader.readAsDataURL(file);\n    };\n  };\n\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n      utils = _ref.utils;\n\n    // get quick reference to Type utils\n    var Type = utils.Type,\n      createWorker = utils.createWorker,\n      createRoute = utils.createRoute,\n      isFile = utils.isFile;\n\n    var encode = function encode(_ref2) {\n      var name = _ref2.name,\n        file = _ref2.file;\n      return new Promise(function(resolve) {\n        var worker = createWorker(DataURIWorker);\n        worker.post({ file: file }, function(data) {\n          resolve({ name: name, data: data });\n          worker.terminate();\n        });\n      });\n    };\n\n    // holds base64 strings till can be moved to item\n    var base64Cache = [];\n    addFilter('DID_CREATE_ITEM', function(item, _ref3) {\n      var query = _ref3.query;\n\n      if (!query('GET_ALLOW_FILE_ENCODE')) return;\n\n      item.extend('getFileEncodeBase64String', function() {\n        return base64Cache[item.id] && base64Cache[item.id].data;\n      });\n      item.extend('getFileEncodeDataURL', function() {\n        return 'data:'\n          .concat(item.fileType, ';base64,')\n          .concat(base64Cache[item.id].data);\n      });\n    });\n\n    addFilter('SHOULD_PREPARE_OUTPUT', function(shouldPrepareOutput, _ref4) {\n      var query = _ref4.query;\n      return new Promise(function(resolve) {\n        resolve(query('GET_ALLOW_FILE_ENCODE'));\n      });\n    });\n\n    addFilter('COMPLETE_PREPARE_OUTPUT', function(file, _ref5) {\n      var item = _ref5.item,\n        query = _ref5.query;\n      return new Promise(function(resolve) {\n        // if it's not a file or a list of files, continue\n        if (\n          !query('GET_ALLOW_FILE_ENCODE') ||\n          (!isFile(file) && !Array.isArray(file))\n        ) {\n          return resolve(file);\n        }\n\n        // store metadata settings for this cache\n        base64Cache[item.id] = {\n          metadata: item.getMetadata(),\n          data: null\n        };\n\n        // wait for all file items to be encoded\n        Promise.all(\n          (file instanceof Blob ? [{ name: null, file: file }] : file).map(\n            encode\n          )\n        ).then(function(dataItems) {\n          base64Cache[item.id].data =\n            file instanceof Blob ? dataItems[0].data : dataItems;\n          resolve(file);\n        });\n      });\n    });\n\n    // called for each view that is created right after the 'create' method\n    addFilter('CREATE_VIEW', function(viewAPI) {\n      // get reference to created view\n      var is = viewAPI.is,\n        view = viewAPI.view,\n        query = viewAPI.query;\n\n      // only hook up to item view\n      if (!is('file-wrapper') || !query('GET_ALLOW_FILE_ENCODE')) {\n        return;\n      }\n\n      view.registerWriter(\n        createRoute({\n          DID_PREPARE_OUTPUT: function DID_PREPARE_OUTPUT(_ref6) {\n            var root = _ref6.root,\n              action = _ref6.action;\n\n            // only do this if is not uploading async\n            if (query('IS_ASYNC')) {\n              return;\n            }\n\n            var item = query('GET_ITEM', action.id);\n            if (!item) return;\n\n            // extract base64 string\n            var cache = base64Cache[item.id];\n            var metadata = cache.metadata;\n            var data = cache.data;\n\n            // create JSON string from encoded data\n            var value = JSON.stringify({\n              id: item.id,\n              name: item.file.name,\n              type: item.file.type,\n              size: item.file.size,\n              metadata: metadata,\n              data: data\n            });\n\n            // for filepond < 4.13.0\n            if (root.ref.data) {\n              root.ref.data.value = value;\n            }\n            // newer versions\n            else {\n              root.dispatch('DID_DEFINE_VALUE', {\n                id: item.id,\n                value: value\n              });\n            }\n          },\n          DID_REMOVE_ITEM: function DID_REMOVE_ITEM(_ref7) {\n            var action = _ref7.action;\n            var item = query('GET_ITEM', action.id);\n            if (!item) return;\n            delete base64Cache[item.id];\n          }\n        })\n      );\n    });\n\n    return {\n      options: {\n        // Enable or disable file encoding\n        allowFileEncode: [true, Type.BOOLEAN]\n      }\n    };\n  };\n\n  // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n  var isBrowser =\n    typeof window !== 'undefined' && typeof window.document !== 'undefined';\n  if (isBrowser) {\n    document.dispatchEvent(\n      new CustomEvent('FilePond:pluginloaded', { detail: plugin })\n    );\n  }\n\n  return plugin;\n});\n"]},"metadata":{},"sourceType":"script"}