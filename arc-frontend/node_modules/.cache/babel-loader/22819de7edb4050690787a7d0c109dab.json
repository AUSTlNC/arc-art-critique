{"ast":null,"code":"/*!\n * FilePondPluginImageResize 2.0.10\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.FilePondPluginImageResize = factory());\n})(this, function () {\n  'use strict'; // test if file is of type image\n\n  var isImage = function isImage(file) {\n    return /^image/.test(file.type);\n  };\n\n  var getImageSize = function getImageSize(url, cb) {\n    var image = new Image();\n\n    image.onload = function () {\n      var width = image.naturalWidth;\n      var height = image.naturalHeight;\n      image = null;\n      cb({\n        width: width,\n        height: height\n      });\n    };\n\n    image.onerror = function () {\n      return cb(null);\n    };\n\n    image.src = url;\n  };\n  /**\n   * Image Auto Resize Plugin\n   */\n\n\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n        utils = _ref.utils;\n    var Type = utils.Type; // subscribe to file load and append required transformations\n\n    addFilter('DID_LOAD_ITEM', function (item, _ref2) {\n      var query = _ref2.query;\n      return new Promise(function (resolve, reject) {\n        // get file reference\n        var file = item.file; // if this is not an image we do not have any business cropping it\n\n        if (!isImage(file) || !query('GET_ALLOW_IMAGE_RESIZE')) {\n          // continue with the unaltered dataset\n          return resolve(item);\n        }\n\n        var mode = query('GET_IMAGE_RESIZE_MODE');\n        var width = query('GET_IMAGE_RESIZE_TARGET_WIDTH');\n        var height = query('GET_IMAGE_RESIZE_TARGET_HEIGHT');\n        var upscale = query('GET_IMAGE_RESIZE_UPSCALE'); // no resizing to be done\n\n        if (width === null && height === null) return resolve(item);\n        var targetWidth = width === null ? height : width;\n        var targetHeight = height === null ? targetWidth : height; // if should not upscale, we need to determine the size of the file\n\n        var fileURL = URL.createObjectURL(file);\n        getImageSize(fileURL, function (size) {\n          URL.revokeObjectURL(fileURL); // something went wrong\n\n          if (!size) return resolve(item);\n          var imageWidth = size.width,\n              imageHeight = size.height; // get exif orientation\n\n          var orientation = (item.getMetadata('exif') || {}).orientation || -1; // swap width and height if orientation needs correcting\n\n          if (orientation >= 5 && orientation <= 8) {\n            var _ref3 = [imageHeight, imageWidth];\n            imageWidth = _ref3[0];\n            imageHeight = _ref3[1];\n          } // image is already perfect size, no transformations required\n\n\n          if (imageWidth === targetWidth && imageHeight === targetHeight) return resolve(item); // already contained?\n          // can't upscale image, so if already at correct scale, exit\n\n          if (!upscale) {\n            // covering target size\n            if (mode === 'cover') {\n              // if one of edges is smaller than target size, exit\n              if (imageWidth <= targetWidth || imageHeight <= targetHeight) return resolve(item);\n            } // not covering target size, if image is contained in target size, exit\n            else if (imageWidth <= targetWidth && imageHeight <= targetWidth) {\n                return resolve(item);\n              }\n          } // the image needs to be resized\n\n\n          item.setMetadata('resize', {\n            mode: mode,\n            upscale: upscale,\n            size: {\n              width: targetWidth,\n              height: targetHeight\n            }\n          });\n          resolve(item);\n        });\n      });\n    }); // Expose plugin options\n\n    return {\n      options: {\n        // Enable or disable image resizing\n        allowImageResize: [true, Type.BOOLEAN],\n        // the method of rescaling\n        // - force => force set size\n        // - cover => pick biggest dimension\n        // - contain => pick smaller dimension\n        imageResizeMode: ['cover', Type.STRING],\n        // set to false to disable upscaling of image smaller than the target width / height\n        imageResizeUpscale: [true, Type.BOOLEAN],\n        // target width\n        imageResizeTargetWidth: [null, Type.INT],\n        // target height\n        imageResizeTargetHeight: [null, Type.INT]\n      }\n    };\n  }; // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n\n\n  var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\n  if (isBrowser) {\n    document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', {\n      detail: plugin\n    }));\n  }\n\n  return plugin;\n});","map":{"version":3,"sources":["/Users/AustinCai/Desktop/CS 370/ARC/arc-art-critique/arc-frontend/node_modules/filepond-plugin-image-resize/dist/filepond-plugin-image-resize.js"],"names":["global","factory","exports","module","define","amd","self","FilePondPluginImageResize","isImage","file","test","type","getImageSize","url","cb","image","Image","onload","width","naturalWidth","height","naturalHeight","onerror","src","plugin","_ref","addFilter","utils","Type","item","_ref2","query","Promise","resolve","reject","mode","upscale","targetWidth","targetHeight","fileURL","URL","createObjectURL","size","revokeObjectURL","imageWidth","imageHeight","orientation","getMetadata","_ref3","setMetadata","options","allowImageResize","BOOLEAN","imageResizeMode","STRING","imageResizeUpscale","imageResizeTargetWidth","INT","imageResizeTargetHeight","isBrowser","window","document","dispatchEvent","CustomEvent","detail"],"mappings":"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","sourcesContent":["/*!\n * FilePondPluginImageResize 2.0.10\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\n(function(global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined'\n        ? (module.exports = factory())\n        : typeof define === 'function' && define.amd\n        ? define(factory)\n        : ((global = global || self), (global.FilePondPluginImageResize = factory()));\n})(this, function() {\n    'use strict';\n\n    // test if file is of type image\n    var isImage = function isImage(file) {\n        return /^image/.test(file.type);\n    };\n\n    var getImageSize = function getImageSize(url, cb) {\n        var image = new Image();\n        image.onload = function() {\n            var width = image.naturalWidth;\n            var height = image.naturalHeight;\n            image = null;\n            cb({ width: width, height: height });\n        };\n        image.onerror = function() {\n            return cb(null);\n        };\n        image.src = url;\n    };\n\n    /**\n     * Image Auto Resize Plugin\n     */\n    var plugin = function plugin(_ref) {\n        var addFilter = _ref.addFilter,\n            utils = _ref.utils;\n        var Type = utils.Type;\n\n        // subscribe to file load and append required transformations\n        addFilter('DID_LOAD_ITEM', function(item, _ref2) {\n            var query = _ref2.query;\n            return new Promise(function(resolve, reject) {\n                // get file reference\n                var file = item.file;\n\n                // if this is not an image we do not have any business cropping it\n                if (!isImage(file) || !query('GET_ALLOW_IMAGE_RESIZE')) {\n                    // continue with the unaltered dataset\n                    return resolve(item);\n                }\n\n                var mode = query('GET_IMAGE_RESIZE_MODE');\n                var width = query('GET_IMAGE_RESIZE_TARGET_WIDTH');\n                var height = query('GET_IMAGE_RESIZE_TARGET_HEIGHT');\n                var upscale = query('GET_IMAGE_RESIZE_UPSCALE');\n\n                // no resizing to be done\n                if (width === null && height === null) return resolve(item);\n\n                var targetWidth = width === null ? height : width;\n                var targetHeight = height === null ? targetWidth : height;\n\n                // if should not upscale, we need to determine the size of the file\n                var fileURL = URL.createObjectURL(file);\n                getImageSize(fileURL, function(size) {\n                    URL.revokeObjectURL(fileURL);\n\n                    // something went wrong\n                    if (!size) return resolve(item);\n                    var imageWidth = size.width,\n                        imageHeight = size.height;\n\n                    // get exif orientation\n                    var orientation = (item.getMetadata('exif') || {}).orientation || -1;\n\n                    // swap width and height if orientation needs correcting\n                    if (orientation >= 5 && orientation <= 8) {\n                        var _ref3 = [imageHeight, imageWidth];\n                        imageWidth = _ref3[0];\n                        imageHeight = _ref3[1];\n                    }\n\n                    // image is already perfect size, no transformations required\n                    if (imageWidth === targetWidth && imageHeight === targetHeight)\n                        return resolve(item);\n\n                    // already contained?\n                    // can't upscale image, so if already at correct scale, exit\n                    if (!upscale) {\n                        // covering target size\n                        if (mode === 'cover') {\n                            // if one of edges is smaller than target size, exit\n                            if (imageWidth <= targetWidth || imageHeight <= targetHeight)\n                                return resolve(item);\n                        }\n\n                        // not covering target size, if image is contained in target size, exit\n                        else if (imageWidth <= targetWidth && imageHeight <= targetWidth) {\n                            return resolve(item);\n                        }\n                    }\n\n                    // the image needs to be resized\n                    item.setMetadata('resize', {\n                        mode: mode,\n                        upscale: upscale,\n                        size: {\n                            width: targetWidth,\n                            height: targetHeight,\n                        },\n                    });\n\n                    resolve(item);\n                });\n            });\n        });\n\n        // Expose plugin options\n        return {\n            options: {\n                // Enable or disable image resizing\n                allowImageResize: [true, Type.BOOLEAN],\n\n                // the method of rescaling\n                // - force => force set size\n                // - cover => pick biggest dimension\n                // - contain => pick smaller dimension\n                imageResizeMode: ['cover', Type.STRING],\n\n                // set to false to disable upscaling of image smaller than the target width / height\n                imageResizeUpscale: [true, Type.BOOLEAN],\n\n                // target width\n                imageResizeTargetWidth: [null, Type.INT],\n\n                // target height\n                imageResizeTargetHeight: [null, Type.INT],\n            },\n        };\n    };\n\n    // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n    var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n    if (isBrowser) {\n        document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', { detail: plugin }));\n    }\n\n    return plugin;\n});\n"]},"metadata":{},"sourceType":"script"}