{"ast":null,"code":"var _jsxFileName = \"/Users/AustinCai/Desktop/CS 370/ARC/Arc-FrontEnd-2.0/src/components/addPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Modal, FloatingLabel, Form, Row, Col, ToggleButton, ButtonGroup } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nimport Axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { FilePond, File, registerPlugin, Create } from 'react-filepond';\nimport 'filepond/dist/filepond.min.css';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport FilePondPluginFileEncode from 'filepond-plugin-file-encode';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport { file } from \"@babel/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginFileEncode);\n\nfunction AddPost(props) {\n  _s();\n\n  const [artType, setartType] = useState('artwork');\n  const [photoURL, setPhotoURL] = useState(null);\n  const [isLoggedIn, setLoggedIn] = useState(false);\n  const [loggedInUser, setLoggedInUser] = useState('');\n  const [files, setFiles] = useState([]);\n  const [clicked, setClicked] = useState(false);\n  const history = useHistory();\n  useEffect(() => {\n    Axios.get(\"/api/login\").then(response => {\n      if (response.data.loggedIn == true) {\n        console.log(response.data.user);\n        setLoggedIn(true);\n        setLoggedInUser(response.data.user);\n      }\n\n      ;\n    });\n  }, []);\n  const type = [{\n    id: '1',\n    value: 'artwork'\n  }, {\n    id: '2',\n    value: 'photography'\n  }];\n\n  function uploadImage(e) {\n    setPhotoURL(URL.createObjectURL(e.target.files[0]));\n  }\n\n  function upload() {\n    //  console.log(FilePond.parse(files[0]));\n    console.log(loggedInUser._id);\n    console.log(files);\n    console.log(document.getElementsByName(\"files\")); //  const pond= Create(files,{\n    //    maxFiles:1,\n    //    allowBrowse:false\n    //  })\n\n    let post = {\n      title: document.getElementById('photoID').value,\n      description: document.getElementById('description').value,\n      artType: artType,\n      photoURL: photoURL,\n      image: files[0].getFileEncodeBase64String(),\n      imageType: files[0].fileType,\n      userinfo: loggedInUser._id\n    };\n    console.log(post);\n    setClicked(true);\n    Axios.post('/posts', post).then(function (response) {\n      console.log(response);\n    });\n    props.onHide();\n    history.push(\"/\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, { ...props,\n    size: \"lg\",\n    animation: false,\n    centered: true,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        id: \"contained-modal-title-vcenter\",\n        children: \"Add A New Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Upload Your Art Here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FloatingLabel, {\n        controlId: \"floatingTextarea\",\n        label: \"Title\",\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          id: \"photoID\",\n          as: \"textarea\",\n          placeholder: \"Leave a comment here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FloatingLabel, {\n        controlId: \"floatingTextarea2\",\n        label: \"Description\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          id: \"description\",\n          as: \"textarea\",\n          placeholder: \"Leave a comment here\",\n          style: {\n            height: '100px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Row,\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"radio\",\n            label: \"Upload an Artwork\",\n            name: \"artwork\",\n            id: \"artwork\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"radio\",\n            label: \"Upload a Photography\",\n            name: \"photography\",\n            id: \"photography\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: /*#__PURE__*/_jsxDEV(FilePond, {\n            files: files,\n            onupdatefiles: setFiles,\n            allowMultiple: true,\n            server: {\n              url: '/posts/temp',\n              timeout: 7000,\n              process: (fieldName, file, metadata, load, error, progress, abort, transfer, options) => {\n                // fieldName is the name of the input field\n                // file is the actual file object to send\n                const formData = new FormData();\n                const id = 1234;\n                formData.append(fieldName, file, file.name);\n                console.log(formData);\n                const request = new XMLHttpRequest();\n                request.open('POST', '/posts/temp');\n                console.log(request);\n                console.log(fieldName);\n                console.log(file); // Should call the progress method to update the progress to 100% before calling load\n                // Setting computable to false switches the loading indicator to infinite mode\n\n                request.upload.onprogress = e => {\n                  progress(e.lengthComputable, e.loaded, e.total);\n                }; // Should call the load method when done and pass the returned server file id\n                // this server file id is then used later on when reverting or restoring a file\n                // so your server knows which file to return without exposing that info to the client\n\n\n                request.onload = function () {\n                  if (request.status >= 200 && request.status < 300) {\n                    // the load method accepts either a string (id) or an object\n                    load(request.responseText);\n                  } else {\n                    // Can call the error method if something is wrong, should exit after\n                    error('oh no');\n                  }\n                };\n\n                console.log(formData);\n                request.send(file);\n                console.log(files[0]);\n                console.log(files[0][\"fileType\"]); // Should expose an abort method so  the request can be cancelled\n\n                return {\n                  abort: () => {\n                    // This function is entered if the user has tapped the cancel button\n                    request.abort(); // Let FilePond know the request has been cancelled\n\n                    abort();\n                  }\n                };\n              },\n              load: \"./upload\",\n              fetch: './upload'\n            } // server=\"http://localhost:9999/posts/tmp\"\n            ,\n            maxFiles: 3,\n            name: \"files\",\n            labelIdle: \"Drag & Drop your files or <span class=\\\"filepond--label-action\\\">Browse</span>\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: props.onHide,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: upload,\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddPost, \"P6KW9YRCvVDF1/tfYN4Aja1/D3k=\", false, function () {\n  return [useHistory];\n});\n\n_c = AddPost;\nexport default AddPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPost\");","map":{"version":3,"sources":["/Users/AustinCai/Desktop/CS 370/ARC/Arc-FrontEnd-2.0/src/components/addPost.js"],"names":["React","useState","useEffect","useContext","Modal","FloatingLabel","Form","Row","Col","ToggleButton","ButtonGroup","Button","Axios","useHistory","FilePond","File","registerPlugin","Create","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginFileEncode","file","AddPost","props","artType","setartType","photoURL","setPhotoURL","isLoggedIn","setLoggedIn","loggedInUser","setLoggedInUser","files","setFiles","clicked","setClicked","history","get","then","response","data","loggedIn","console","log","user","type","id","value","uploadImage","e","URL","createObjectURL","target","upload","_id","document","getElementsByName","post","title","getElementById","description","image","getFileEncodeBase64String","imageType","fileType","userinfo","onHide","push","height","url","timeout","process","fieldName","metadata","load","error","progress","abort","transfer","options","formData","FormData","append","name","request","XMLHttpRequest","open","onprogress","lengthComputable","loaded","total","onload","status","responseText","send","fetch"],"mappings":"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","sourcesContent":["import React, { useState,useEffect, useContext } from \"react\";\nimport {Modal,FloatingLabel,Form,Row,Col,ToggleButton,ButtonGroup} from 'react-bootstrap';\nimport {Button} from 'react-bootstrap';\nimport Axios from \"axios\";\nimport {useHistory} from \"react-router-dom\";\nimport { FilePond, File, registerPlugin,Create } from 'react-filepond'\nimport 'filepond/dist/filepond.min.css'\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation'\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview'\nimport FilePondPluginFileEncode from 'filepond-plugin-file-encode';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css'\nimport { file } from \"@babel/types\";\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview,FilePondPluginFileEncode)\nfunction AddPost(props){\n  const [artType,setartType]=useState('artwork');\n  const [photoURL,setPhotoURL]=useState(null);\n  const [isLoggedIn, setLoggedIn]=useState(false);\n  const [loggedInUser,setLoggedInUser]=useState('');\n  const [files, setFiles] = useState([]);\n\n  const[clicked,setClicked]=useState(false);\n  const history=useHistory();\n  useEffect(()=>{\n    Axios.get(\"/api/login\").then((response)=>{\n      if(response.data.loggedIn==true){\n        console.log(response.data.user);\n        setLoggedIn(true);\n        setLoggedInUser(response.data.user);\n      };\n    })\n  },[]);\n  const type=[\n    {id:'1',value:'artwork'},\n    {id:'2',value:'photography'}\n  ]\n\n  function uploadImage(e){\n    setPhotoURL(URL.createObjectURL(e.target.files[0]));\n  }\n  function upload(){\n  //  console.log(FilePond.parse(files[0]));\n   console.log(loggedInUser._id);\n   console.log(files);\n   console.log((document.getElementsByName(\"files\")));\n  //  const pond= Create(files,{\n  //    maxFiles:1,\n  //    allowBrowse:false\n  //  })\n   \n    let post={\n      title:document.getElementById('photoID').value,\n      description:document.getElementById('description').value,\n      artType:artType,\n      photoURL:photoURL,\n      image:files[0].getFileEncodeBase64String(),\n      imageType:files[0].fileType,\n      userinfo:loggedInUser._id\n    }\n    console.log(post);\n    setClicked(true);\n    Axios.post('/posts',post).then(function(response){\n      console.log(response);\n    });\n    props.onHide();\n    history.push(\"/\");\n  }\n    return (\n    <Modal\n    {...props}\n    size=\"lg\"\n    animation={false}\n    centered\n  >\n    <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Add A New Post\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <h4>Upload Your Art Here</h4>\n        <FloatingLabel  controlId=\"floatingTextarea\" label=\"Title\" className=\"mb-3\">\n    <Form.Control id='photoID' as=\"textarea\" placeholder=\"Leave a comment here\" />\n  </FloatingLabel>\n  <FloatingLabel controlId=\"floatingTextarea2\" label=\"Description\">\n    <Form.Control\n      id='description'\n      as=\"textarea\"\n      placeholder=\"Leave a comment here\"\n      style={{ height: '100px' }}\n    />\n  </FloatingLabel>\n  <fieldset>\n    <Form.Group as={Row} className=\"mb-3\">\n        <Form.Check\n          type=\"radio\"\n          label=\"Upload an Artwork\"\n          name=\"artwork\"\n          id=\"artwork\"\n        />\n        <Form.Check\n          type=\"radio\"\n          label=\"Upload a Photography\"\n          name=\"photography\"\n          id=\"photography\"\n        />\n    </Form.Group>\n    <Form.Group>\n    <FilePond\n        files={files}\n        onupdatefiles={setFiles}\n        allowMultiple={true}\n        server={{\n          url:'/posts/temp',\n          timeout:7000,\n          process: (fieldName, file, metadata, load, error, progress, abort, transfer, options) => {\n            // fieldName is the name of the input field\n            // file is the actual file object to send\n            const formData = new FormData();\n            const id=1234;\n            formData.append(fieldName, file, file.name);\n            console.log(formData);\n            const request = new XMLHttpRequest();\n            request.open('POST', '/posts/temp');\n            console.log(request);\n            console.log(fieldName);\n            console.log(file);\n            // Should call the progress method to update the progress to 100% before calling load\n            // Setting computable to false switches the loading indicator to infinite mode\n            request.upload.onprogress = (e) => {\n                progress(e.lengthComputable, e.loaded, e.total);\n            };\n            \n            // Should call the load method when done and pass the returned server file id\n            // this server file id is then used later on when reverting or restoring a file\n            // so your server knows which file to return without exposing that info to the client\n            request.onload = function () {\n                if (request.status >= 200 && request.status < 300) {\n                    // the load method accepts either a string (id) or an object\n                    load(request.responseText);\n                } else {\n                    // Can call the error method if something is wrong, should exit after\n                    error('oh no');\n                }\n            };\n            console.log(formData);\n            request.send(file);\n            console.log(files[0]);\n            console.log(files[0][\"fileType\"]);\n            // Should expose an abort method so  the request can be cancelled\n            return {\n                abort: () => {\n                    // This function is entered if the user has tapped the cancel button\n                    request.abort();\n\n                    // Let FilePond know the request has been cancelled\n                    abort();\n                },\n            };\n        },\n          load:\"./upload\",\n          fetch:'./upload'\n        }}\n        // server=\"http://localhost:9999/posts/tmp\"\n        maxFiles={3}\n        name=\"files\"\n        labelIdle='Drag & Drop your files or <span class=\"filepond--label-action\">Browse</span>'\n      />\n    </Form.Group>\n  </fieldset>\n      </Modal.Body>\n    <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n        <Button onClick={upload} type='submit'>Upload</Button>\n      </Modal.Footer>\n   </Modal>);\n}\nexport default AddPost;"]},"metadata":{},"sourceType":"module"}