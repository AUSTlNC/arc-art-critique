{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = gatherSequenceExpressions;\n\nvar _getBindingIdentifiers = _interopRequireDefault(require(\"../retrievers/getBindingIdentifiers\"));\n\nvar _generated = require(\"../validators/generated\");\n\nvar _generated2 = require(\"../builders/generated\");\n\nvar _cloneNode = _interopRequireDefault(require(\"../clone/cloneNode\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction gatherSequenceExpressions(nodes, scope, declars) {\n  const exprs = [];\n  let ensureLastUndefined = true;\n\n  for (const node of nodes) {\n    if (!(0, _generated.isEmptyStatement)(node)) {\n      ensureLastUndefined = false;\n    }\n\n    if ((0, _generated.isExpression)(node)) {\n      exprs.push(node);\n    } else if ((0, _generated.isExpressionStatement)(node)) {\n      exprs.push(node.expression);\n    } else if ((0, _generated.isVariableDeclaration)(node)) {\n      if (node.kind !== \"var\") return;\n\n      for (const declar of node.declarations) {\n        const bindings = (0, _getBindingIdentifiers.default)(declar);\n\n        for (const key of Object.keys(bindings)) {\n          declars.push({\n            kind: node.kind,\n            id: (0, _cloneNode.default)(bindings[key])\n          });\n        }\n\n        if (declar.init) {\n          exprs.push((0, _generated2.assignmentExpression)(\"=\", declar.id, declar.init));\n        }\n      }\n\n      ensureLastUndefined = true;\n    } else if ((0, _generated.isIfStatement)(node)) {\n      const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode();\n      const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();\n      if (!consequent || !alternate) return;\n      exprs.push((0, _generated2.conditionalExpression)(node.test, consequent, alternate));\n    } else if ((0, _generated.isBlockStatement)(node)) {\n      const body = gatherSequenceExpressions(node.body, scope, declars);\n      if (!body) return;\n      exprs.push(body);\n    } else if ((0, _generated.isEmptyStatement)(node)) {\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      return;\n    }\n  }\n\n  if (ensureLastUndefined) {\n    exprs.push(scope.buildUndefinedNode());\n  }\n\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return (0, _generated2.sequenceExpression)(exprs);\n  }\n}","map":{"version":3,"sources":["/Users/AustinCai/Desktop/CS 370/ARC/arc-art-critique/arc-frontend/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js"],"names":["Object","defineProperty","exports","value","default","gatherSequenceExpressions","_getBindingIdentifiers","_interopRequireDefault","require","_generated","_generated2","_cloneNode","obj","__esModule","nodes","scope","declars","exprs","ensureLastUndefined","node","isEmptyStatement","isExpression","push","isExpressionStatement","expression","isVariableDeclaration","kind","declar","declarations","bindings","key","keys","id","init","assignmentExpression","isIfStatement","consequent","buildUndefinedNode","alternate","conditionalExpression","test","isBlockStatement","body","indexOf","length","sequenceExpression"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = gatherSequenceExpressions;\n\nvar _getBindingIdentifiers = _interopRequireDefault(require(\"../retrievers/getBindingIdentifiers\"));\n\nvar _generated = require(\"../validators/generated\");\n\nvar _generated2 = require(\"../builders/generated\");\n\nvar _cloneNode = _interopRequireDefault(require(\"../clone/cloneNode\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction gatherSequenceExpressions(nodes, scope, declars) {\n  const exprs = [];\n  let ensureLastUndefined = true;\n\n  for (const node of nodes) {\n    if (!(0, _generated.isEmptyStatement)(node)) {\n      ensureLastUndefined = false;\n    }\n\n    if ((0, _generated.isExpression)(node)) {\n      exprs.push(node);\n    } else if ((0, _generated.isExpressionStatement)(node)) {\n      exprs.push(node.expression);\n    } else if ((0, _generated.isVariableDeclaration)(node)) {\n      if (node.kind !== \"var\") return;\n\n      for (const declar of node.declarations) {\n        const bindings = (0, _getBindingIdentifiers.default)(declar);\n\n        for (const key of Object.keys(bindings)) {\n          declars.push({\n            kind: node.kind,\n            id: (0, _cloneNode.default)(bindings[key])\n          });\n        }\n\n        if (declar.init) {\n          exprs.push((0, _generated2.assignmentExpression)(\"=\", declar.id, declar.init));\n        }\n      }\n\n      ensureLastUndefined = true;\n    } else if ((0, _generated.isIfStatement)(node)) {\n      const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode();\n      const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();\n      if (!consequent || !alternate) return;\n      exprs.push((0, _generated2.conditionalExpression)(node.test, consequent, alternate));\n    } else if ((0, _generated.isBlockStatement)(node)) {\n      const body = gatherSequenceExpressions(node.body, scope, declars);\n      if (!body) return;\n      exprs.push(body);\n    } else if ((0, _generated.isEmptyStatement)(node)) {\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      return;\n    }\n  }\n\n  if (ensureLastUndefined) {\n    exprs.push(scope.buildUndefinedNode());\n  }\n\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return (0, _generated2.sequenceExpression)(exprs);\n  }\n}"]},"metadata":{},"sourceType":"script"}