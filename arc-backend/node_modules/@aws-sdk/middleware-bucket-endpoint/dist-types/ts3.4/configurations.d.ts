import { LoadedConfigSelectors } from "@aws-sdk/node-config-provider";
import { Provider, RegionInfoProvider } from "@aws-sdk/types";
export interface BucketEndpointInputConfig {
    
    bucketEndpoint?: boolean;
    
    forcePathStyle?: boolean;
    
    useAccelerateEndpoint?: boolean;
    
    useDualstackEndpoint?: boolean;
    
    useArnRegion?: boolean | Provider<boolean>;
    
    disableMultiregionAccessPoints?: boolean | Provider<boolean>;
}
interface PreviouslyResolved {
    isCustomEndpoint: boolean;
    region: Provider<string>;
    regionInfoProvider: RegionInfoProvider;
}
export interface BucketEndpointResolvedConfig {
    
    isCustomEndpoint: boolean;
    
    bucketEndpoint: boolean;
    
    forcePathStyle: boolean;
    
    useAccelerateEndpoint: boolean;
    
    useDualstackEndpoint: boolean;
    
    useArnRegion: Provider<boolean>;
    
    region: Provider<string>;
    
    regionInfoProvider: RegionInfoProvider;
    disableMultiregionAccessPoints: Provider<boolean>;
}
export declare function resolveBucketEndpointConfig<T>(input: T & PreviouslyResolved & BucketEndpointInputConfig): T & BucketEndpointResolvedConfig;
export declare const NODE_USE_ARN_REGION_ENV_NAME = "AWS_S3_USE_ARN_REGION";
export declare const NODE_USE_ARN_REGION_INI_NAME = "s3_use_arn_region";
export declare const NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME = "AWS_S3_DISABLE_MULTIREGION_ACCESS_POINTS";
export declare const NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME = "s3_disable_multiregion_access_points";

export declare const NODE_USE_ARN_REGION_CONFIG_OPTIONS: LoadedConfigSelectors<boolean>;
export declare const NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS: LoadedConfigSelectors<boolean>;
export {};
